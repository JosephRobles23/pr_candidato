name: SonarQube
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"JosephRobles23_pr_candidato" /o:"josephrobles23" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Check SonarQube Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          $qualityGateStatus = (Invoke-WebRequest -Uri "https://sonarcloud.io/api/qualitygates/project_status?projectKey=JosephRobles23_pr_candidato" -Headers @{"Authorization"="Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('${{ secrets.SONAR_TOKEN }}:')))" }).Content | ConvertFrom-Json
          if ($qualityGateStatus.projectStatus.status -ne "OK") {
            Write-Host "❌ Quality Gate failed :( : $($qualityGateStatus.projectStatus.statusReason)"
            exit 1
          } else {
            Write-Host "✅ Quality Gate passed successfully! :)"
          }
